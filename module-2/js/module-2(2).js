// ============== функции ==============

// функция это мясорубка, в которую нужно что-то положить и затем вызвать

// обьявляем функцию, котоая находится в переменной
// в круглые скобки передаются параметры, которые будут выполняться во время вызова функции
// const add = function(a,b) {
//     console.log(a)
//     console.log(b)
//     // console.log() выполнится только после вызова этой функции
// //return это возврат результата из функции 
//     return a+b;
// }
// // вызываем функцию
// // она выполнится столько раз, сколько мы её вызвали
// const r1 = add(2, 4)
// console.log('r1:', r1)

// const r2 = add(4, 5)
// console.log('r2:', r2)

// const r3 = add(34, 54)
// console.log('r3:', r3)

// =================================================

// const fn = function (value) {
//     console.log(1);
//     console.log(2);
     
//     if(value < 50) {
//         return 'меньше 50'
//     } 
//         return 'больше 50'
// пустой return вернёт undefined (который приводится к false)
// дойдя до return функция прекращает выполняться
// }
// console.log('результат функции:',fn(10))
// console.log('результат функции:',fn(1000))

// ====================================================
// Стек вызовов
// Stack trace и поиск ошибок

// const fnA = function () {
//     console.log('выполняется функция А')
//     fnB()
// }

// const fnB = function () {
//     console.log('выполняется функция Б')
//     fnC()
// }

// const fnC = function () {
//     console.log('выполняется функция С')

//     console.log(value);
// }

// console.log('перед вызовом функции А')
// fnA()
// console.log('после вызова функции А')

// console.log('перед вызовом функции Б')
// fnB()
// console.log('после вызова функции Б')

// console.log('перед вызовом функции С')
// fnC()
// console.log('после вызова функции С')

// ======================================================